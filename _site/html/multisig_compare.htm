<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Generated by ExamDiff Pro build 9.0.1.0 -->
<!-- saved from url=(0014)about:internet -->

<head>
<title>ExamDiff Pro Diff Report</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<style type="text/css">
body{background-color: #fff; font-family: Lucida Console, monospace; font-size: 13px; font-style: normal; font-weight: 400;}
table td, table th {padding: 0;}

#container{padding: 2px; border: 1px solid #333; border-radius: 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px; -khtml-border-radius: 5px;}
.pane{float: left; margin: 2px;}
#navigation{width: 100%; table-layout: fixed;}
.button{width: 30px;}
.button input{width: 100%;}
#currentDiff{width: 100%;}
.title{margin-bottom: 4px; padding: 2px; overflow: hidden; background-color: #eee; border: 1px solid #333; font-family: "Segoe UI", Helvetica, Arial, Verdana, sans-serif; font-size: 12px;}
.file{overflow: scroll; border: 1px solid #333;}
.panes{border-spacing: 0;}
.content{width: 100%;}
.content div{min-width: 100%;}
.header{background-color: #C0C0C0; height: 12px; border-bottom: 1px solid #666;}
.diffBar{vertical-align: top; width: 6px; min-width: 6px; border-right: 1px solid #666; background-color: #eee;}
.diffs{position: relative;}
.diff{position: absolute; left: -3px; min-width: 9px; background-color: #c0c0c0; border-top: 1px solid #666; border-bottom: 1px solid #666; border-right: 1px solid #666; }
.diff.active{background-color: yellow;}
.nums{float: left;}
.num{display: block; height: 13px; text-align: right; padding-left: 2px; padding-right: 4px; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}
#legend{height: 13px; clear: both; padding-top: 3px; padding-bottom: 4px; border-bottom: 1px solid #ccc;}
#legend #numDiffs{float: left; margin-left: 3px;}
#legend #colors{float: right; margin-left: 1em; margin-right: 3px;}
#legend #colors div{float: left; margin-right: 1em;}
#inspector{clear: both; border: 1px solid black; margin: 6px 2px; position: relative; top: 2px; overflow: auto; }
#inspector .line {padding: 1px; padding-bottom: 2px;}
#inspector .left.line {border-bottom: 1px solid black;}
#inspector .content div {width: 100%;}
#generated_by {background: #F4F8FF; text-align: right; font-size: 10px; font-family: Arial; color: #888; padding-top: 1px;}
#generated_by a {color: #888;}

.li, .la, .ld, .lc, .ln, .lo, .lg, .lh{position: relative; height: 13px; white-space:pre;}
.lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb{position: absolute; bottom: 0px; height: 1px; border-bottom: 1px solid #000;}
.lbin{white-space: pre; color: #000000; background-color: #FFFFFF;}
.li, .si{color: #000000; background-color: #FFFFFF; text-decoration: none;}
.la, .sa{color: #800000; background-color: #C0C0C0; text-decoration: none;}
.ld, .sd{color: #0000FF; background-color: #E0E0E0; text-decoration: none;}
.lc, .sc{color: #402000; background-color: #F2F2C6; text-decoration: none;}
.ln, .sn{color: #800080; background-color: #A6CAF0; text-decoration: none;}
.lo, .so{color: #FF0000; background-color: #C0DCC0; text-decoration: none;}
.lg, .sig{color: #008000; background-color: #F0F0F0; text-decoration: none;}
.sc2{color: #FF0F87; background-color: #E0E0E0; text-decoration: none;}
.lh{font-weight: 700; color: #3A33BC; display: inline-block; position: relative; white-space: nowrap;}
.lh:before{position: absolute; display:block; top:0; left:0; bottom:0; content: attr(data-content); background-color:#FFF; color:#FFF; z-index:-1; padding-right:.5em;}
.lh:after{position:absolute; content:''; display: block; left:0; right:0; top:50%; background-color:#3A33BC; height:1px; min-height:1px; z-index:-2;}

.directory .content div{padding-left: 3px;}
.directory .content span{margin-right: 3px;}
.directory .l{width: 2272px;}

.s1-90{color:#0000FF;background-color:#FFFFFF;}
.s1-89{color:#008000;background-color:#FFFFFF;}
.s1-86{color:#0000FF;background-color:#FFFFFF;}
.s1-88{color:#000000;background-color:#FFFFFF;}
.s1-87{color:#000000;background-color:#FFFFFF;}
.s1-85{color:#A31515;background-color:#FFFFFF;}
.s1-100{color:#ACA899;background-color:#FFFFFF;}
.s2-90{color:#0000FF;background-color:#FFFFFF;}
.s2-89{color:#008000;background-color:#FFFFFF;}
.s2-86{color:#0000FF;background-color:#FFFFFF;}
.s2-88{color:#000000;background-color:#FFFFFF;}
.s2-87{color:#000000;background-color:#FFFFFF;}
.s2-85{color:#A31515;background-color:#FFFFFF;}
.s2-100{color:#ACA899;background-color:#FFFFFF;}
.num{color:#808080;background-color:#F8F8F8;border-right-width:2px;border-right-style:groove;border-right-color:#E0E0E0;}

</style>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js">

</script>

<script type="text/javascript">
    var $mode = 'text';
    var $orientation = 'vertical';
    var $useLineInspector = true;
    var $lineHeight = 13;
    var $lineWidth = 2272
    var $scrollTimeout;
    var $diffs = [
null,
{d:'Diff 1: Add 1 line (12, second file) after line 10 (first file)',l:[11,11]},
{d:'Diff 2: Change 1 line (24, first file) to 1 line (27, second file)',l:[26,26]},
{d:'Diff 3: Change 1 line (40, first file) to 1 line (43, second file)',l:[42,42]},
{d:'Diff 4: Change 1 line (47, first file) to 1 line (50, second file)',l:[49,49]},
{d:'Diff 5: Change 7 lines (55 - 61, first file) to 5 lines (58 - 62, second file)',l:[57,64]},
{d:'Diff 6: Add 4 lines (127 - 130, second file) after line 124 (first file)',l:[129,132]},
{d:'Diff 7: Change 5 lines (139 - 143, first file) to 1 line (145, second file)',l:[147,151]},
{d:'Diff 8: Change 1 line (185, first file) to 1 line (187, second file)',l:[193,193]},
{d:'Diff 9: Delete 7 lines (230 - 236, first file) after line 230 (second file)',l:[238,244]},
{d:'Diff 10: Change 1 line (249, first file) to 1 line (243, second file)',l:[257,257]},
{d:'Diff 11: Change 1 line (265, first file) to 2 lines (259 - 260, second file)',l:[273,274]},
{d:'Diff 12: Change 2 lines (277 - 278, first file) to 2 lines (272 - 273, second file)',l:[286,287]},
{d:'Diff 13: Change 1 line (288, first file) to 1 line (283, second file)',l:[297,297]},
{d:'Diff 14: Change 1 line (290, first file) to 1 line (285, second file)',l:[299,299]},
{d:'Diff 15: Change 1 line (292, first file) to 1 line (287, second file)',l:[301,301]},
{d:'Diff 16: Change 2 lines (300 - 301, first file) to 2 lines (295 - 296, second file)',l:[309,310]},
{d:'Diff 17: Add 10 lines (299 - 308, second file) after line 302 (first file)',l:[313,322]},
{d:'Diff 18: Change 1 line (305, first file) to 1 line (311, second file)',l:[325,325]},
{d:'Diff 19: Change 1 line (307, first file) to 1 line (313, second file)',l:[327,327]},
{d:'Diff 20: Change 1 line (332, first file) to 1 line (338, second file)',l:[352,352]},
{d:'Diff 21: Change 1 line (338, first file) to 1 line (344, second file)',l:[358,358]},
{d:'Diff 22: Change 1 line (342, first file) to 1 line (348, second file)',l:[362,362]},
{d:'Diff 23: Change 2 lines (344 - 345, first file) to 1 line (350, second file)',l:[364,365]},
{d:'Diff 24: Change 2 lines (347 - 348, first file) to 5 lines (352 - 356, second file)',l:[367,372]},
{d:'Diff 25: Add 2 lines (358 - 359, second file) after line 349 (first file)',l:[374,375]},
{d:'Diff 26: Change 6 lines (351 - 356, first file) to 6 lines (361 - 366, second file)',l:[377,383]},
{d:'Diff 27: Add 2 lines (368 - 369, second file) after line 357 (first file)',l:[385,386]},
{d:'Diff 28: Add 6 lines (371 - 376, second file) after line 358 (first file)',l:[388,393]},
{d:'Diff 29: Change 4 lines (362 - 365, first file) to 10 lines (380 - 389, second file)',l:[397,406]}
];

    try {
        $(document).ready(function() {
            $(window).bind('load resize', fitToWindow);

            populateDiffs();
            registerEventHandlers();

            if ($useLineInspector) {
                $('#inspector').show();
                setLineInspector(0);
            }

            $(window).load(function () {
                firstDiff();
            });
        });
    } catch (e) {
        alert('This diff report did not load correctly, most likely due to lack of an Internet connection.\n\nIf you wish for ExamDiff Pro diff reports to be viewed on computers without Internet access, make sure to check the "Enable offline report viewing" option under Options | HTML.');
    }

    function isIE7() {
        return ($.browser.msie && parseInt($.browser.version) < 8);
    }

    function fitToWindow() {
        var containerWidth = $(window).width() - 23;
        var containerHeight = $(window).height() - 115 - ($useLineInspector ? (2 * $lineHeight + 13) : 0) - (isIE7() ? 7 : 0);

        if ($orientation == 'vertical') {
            var paneWidth = (containerWidth / 2) - 6;
            var paneHeight = containerHeight;
        } else {
            var paneWidth = containerWidth - 6;
            var paneHeight = ((containerHeight - 13) / 2) - 10;
        }

        $('#container').width(containerWidth);
        $('.title').width(paneWidth - 4);
        $('.file').width(paneWidth).height(paneHeight);

        if ($orientation == 'vertical') {
            var titleHeightMax = $('#title1').height();
            if ($('#title2').height() > titleHeightMax)
                titleHeightMax = $('#title2').height();
            $('#title1').height(titleHeightMax);
            $('#title2').height(titleHeightMax);
        }
    }

    function populateDiffs() {
        if ($diffs.length > 1) {
            var lineHeight = $lineHeight;
            if ($.browser.mozilla && $mode == 'binary') {
                lineHeight += 1; // don't know why Firefox behaves differently
            }

            for (var i = 1; i < $diffs.length; i++) {
                $('#currentDiff').append($('<option></option>').attr('value', i).text($diffs[i].d));
                $('.diffs').append($('<div class="diff"></div>')
                                 .attr('title', $diffs[i].d)
                         .css('top', ($diffs[i].l[0] * lineHeight) + 'px')
                         .height((($diffs[i].l[1] - $diffs[i].l[0] + 1) * lineHeight) - 1));
                $('.d' + i).attr('title', $diffs[i].d);
            }

            if ($mode == 'directory') {
                $('.diffs').css('margin-top', (lineHeight - 1) + 'px');
            }

            if (!isIE7()) {
                $('.diffBar').show(); // IE7 and below can't handle the diff bars
            }
            else {
                $('.li, .la, .ld, .lc, .ln, .lo, .lg, .lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb').css({ 'position': 'static' }); // IE7 and below can't handle 'relative'
            }
        } else {
            $('#currentDiff').append($('<option></option>').attr('value', 0).text('(No differences)'));
        }
    }

    function registerEventHandlers() {
        $('#currentDiff').bind('change keyup', function() {
            goto(currentDiff());
        });

        $('#file1').scroll(function (event) {
        	syncScroll(event);
        });
        $('#file2').scroll(function (event) {
        	syncScroll(event);
        });

        $('.file .l').click(function() {
            updateCurrentDiff(this);
            updateLineInspector(this);
        })

        $('#btnFirst').click(firstDiff);
        $('#btnPrevious').click(previousDiff);
        $('#btnNext').click(nextDiff);
        $('#btnLast').click(lastDiff);
    }

    function syncScroll(e) {
    	clearTimeout($scrollTimeout);

    	if (!e) e = window.event;
    	var $source = $(e.target);
    	var $target = ($source.attr('id') == 'file1') ? $('#file2') : $('#file1')

    	$target.off("scroll").scrollTop($source.scrollTop());
    	$target.off("scroll").scrollLeft($source.scrollLeft());

    	$scrollTimeout = setTimeout(function () {
    		$target.scroll(syncScroll);
    	}, 100, e);
    }

    function goto(diff) {
        if (diff > 0 && diff <= $diffs.length) {
            markCurrentDiff(diff);
            setLineInspector($diffs[diff].l[0]);

            if ($('.comparison .diffBar').css('display') != 'none') {
                var block = $('.diff').eq(diff - 1);
                var tableMidpoint = $('.file').height() / 2;

                if (block.height() > $('.pane').height()) {
                    // Scroll to the top of the diff block
                    $('.file').scrollTop(block.position().top - $lineHeight);
                } else {
                    // Scroll so that diff block is centered
                    var midpoint = block.position().top + (block.height() / 2);
                    $('.file').scrollTop(midpoint - tableMidpoint);
                }
            } else {
                // If diff bar's not shown, just scroll first diff line to top
                var scrollPos = $('.d' + diff).first().position().top - $('.l').first().position().top;
                if ($mode == 'directory') {
                    scrollPos += $lineHeight; // to account for header
                }
                $('.file').scrollTop(scrollPos);
            }
        }
    }

    function markCurrentDiff(diff) {
        $('#currentDiff').val(diff);

        $('.diff').removeClass('active');
        $('.comparison .diffs').each(function(i, diffBar) {
            $(diffBar).children().eq(diff - 1).addClass('active');
        });
    }

    function updateCurrentDiff(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        markCurrentDiff(closestDiffToLine(lineNum));
    }

    function updateLineInspector(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        setLineInspector(lineNum);
    }

    function setLineInspector(lineNum) {
        var leftLine = $($('#file1 .l').get(lineNum));
        var rightLine = $($('#file2 .l').get(lineNum));

        $('#inspectorLeftContent').html(leftLine.html())
        .attr('class', leftLine.attr('class'));
        $('#inspectorRightContent').html(rightLine.html())
        .attr('class', rightLine.attr('class'));

        if ($('.comparison .num').size() > 0) {
            var leftNum = $($('#file1 .num').get(lineNum));
            var rightNum = $($('#file2 .num').get(lineNum));
            var maxWidth = Math.max(leftNum.width(), rightNum.width());

            $('#inspector .left .num').html(leftNum.html())
            .width(maxWidth);
            $('#inspector .right .num').html(rightNum.html())
            .width(maxWidth);
        } else {
            $('#inspector .num').html('')
            .css('width', 0).css('border', 0).css('padding', 0);
        }
    }

    function closestDiffToLine(num) {
        var closest = {
            diff: null,
            dist: Infinity
        };

        for (var i = 1; i < $diffs.length; i++) {
            if ($diffs[i].l[0] <= num && $diffs[i].l[1] >= num) {
                closest = { diff: i, dist: 0 };
            } else {
                var dist = ($diffs[i].l[0] <= num) ? (num - $diffs[i].l[1]) : ($diffs[i].l[0] - num);
                if (dist <= closest.dist) {
                    closest = { diff: i, dist: dist };
                }
            }
        }

        return closest.diff;
    }

    function currentDiff() {
        return parseInt($('#currentDiff').val());
    }

    function firstDiff() {
        goto(1);
    }

    function previousDiff() {
        var diff = currentDiff();
        if (diff > 1) {
            diff--;
        }
        goto(diff);
    }

    function nextDiff() {
        var diff = currentDiff();
        if (diff < ($diffs.length - 1)) {
            diff++;
        }
        goto(diff);
    }

    function lastDiff() {
        goto($diffs.length - 1);
    }
</script>
</head>

<body>
<div id="container" style="">
    <!-- $JS_ONLY_BEGIN$ -->
        <table id="navigation">
            <tr>
                <td class="button"><input type="button" id="btnFirst" value="<<" title="First Difference"/></td>
                <td class="button"><input type="button" id="btnPrevious" value="<" title="Previous Difference"/></td>
                <td class="button"><input type="button" id="btnNext" value=">" title="Next Difference"/></td>
                <td class="button"><input type="button" id="btnLast" value=">>" title="Last Difference"/></td>
                <td>
                    <select id="currentDiff" size="1"></select>
                </td>
            </tr>
        </table>
    <!-- $JS_ONLY_END$ -->

    <div class="text comparison">
        <div class="pane">
            <div id="title1" class="title" style="width:px;" title="Original Foundation Multisig Contract"><b>Original Foundation Multisig Contract</b></div>
            <div id="file1" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num">    </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">    </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>
<div class="num">286 </div>
<div class="num">287 </div>
<div class="num">288 </div>
<div class="num">289 </div>
<div class="num">290 </div>
<div class="num">291 </div>
<div class="num">292 </div>
<div class="num">293 </div>
<div class="num">294 </div>
<div class="num">295 </div>
<div class="num">296 </div>
<div class="num">297 </div>
<div class="num">298 </div>
<div class="num">299 </div>
<div class="num">300 </div>
<div class="num">301 </div>
<div class="num">302 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">303 </div>
<div class="num">304 </div>
<div class="num">305 </div>
<div class="num">306 </div>
<div class="num">307 </div>
<div class="num">308 </div>
<div class="num">309 </div>
<div class="num">310 </div>
<div class="num">311 </div>
<div class="num">312 </div>
<div class="num">313 </div>
<div class="num">314 </div>
<div class="num">315 </div>
<div class="num">316 </div>
<div class="num">317 </div>
<div class="num">318 </div>
<div class="num">319 </div>
<div class="num">320 </div>
<div class="num">321 </div>
<div class="num">322 </div>
<div class="num">323 </div>
<div class="num">324 </div>
<div class="num">325 </div>
<div class="num">326 </div>
<div class="num">327 </div>
<div class="num">328 </div>
<div class="num">329 </div>
<div class="num">330 </div>
<div class="num">331 </div>
<div class="num">332 </div>
<div class="num">333 </div>
<div class="num">334 </div>
<div class="num">335 </div>
<div class="num">336 </div>
<div class="num">337 </div>
<div class="num">338 </div>
<div class="num">339 </div>
<div class="num">340 </div>
<div class="num">341 </div>
<div class="num">342 </div>
<div class="num">343 </div>
<div class="num">344 </div>
<div class="num">345 </div>
<div class="num">346 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">347 </div>
<div class="num">348 </div>
<div class="num">349 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">350 </div>
<div class="num">351 </div>
<div class="num">352 </div>
<div class="num">    </div>
<div class="num">353 </div>
<div class="num">354 </div>
<div class="num">355 </div>
<div class="num">356 </div>
<div class="num">357 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">358 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">359 </div>
<div class="num">360 </div>
<div class="num">361 </div>
<div class="num">362 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">363 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">364 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">365 </div>
<div class="num">366 </div>
<div class="num">367 </div>
<div class="num">368 </div>
<div class="num">369 </div>
<div class="num">370 </div>
<div class="num">371 </div>
<div class="num">372 </div>
<div class="num">373 </div>
<div class="num">374 </div>
<div class="num">375 </div>
<div class="num">376 </div>
<div class="num">377 </div>
<div class="num">378 </div>
<div class="num">379 </div>
<div class="num">380 </div>
<div class="num">381 </div>
<div class="num">382 </div>
<div class="num">383 </div>
<div class="num">384 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="si">//sol Wallet</span></div>
<div class="l li"><span class="si">// Multi-sig, daily-limited account proxy/wallet.</span></div>
<div class="l li"><span class="si">// @authors:</span></div>
<div class="l li"><span class="si">// Gav Wood &lt;g@ethdev.com&gt;</span></div>
<div class="l li"><span class="si">// inheritable &quot;property&quot; contract that enables methods to be protected by requiring the acquiescence of either a</span></div>
<div class="l li"><span class="si">// single, or, crucially, each of a number of, designated owners.</span></div>
<div class="l li"><span class="si">// usage:</span></div>
<div class="l li"><span class="si">// use modifiers onlyowner (just own owned) or onlymanyowners(hash), whereby the same hash must be provided by</span></div>
<div class="l li"><span class="si">// some number (specified in constructor) of the set of owners (specified in the constructor, modifiable) before the</span></div>
<div class="l li"><span class="si">// interior is executed.</span></div>
<div class="l li"> </div>
<div class="l la d1"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">contract multiowned {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // TYPES</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // struct for the status of a pending operation.</span></div>
<div class="l li"><span class="si">    struct PendingState {</span></div>
<div class="l li"><span class="si">        uint yetNeeded;</span></div>
<div class="l li"><span class="si">        uint ownersDone;</span></div>
<div class="l li"><span class="si">        uint index;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // EVENTS</span></div>
<div class="l li"> </div>
<div class="l lc d2"><span class="sc">    // this contract only has </span><span class="sc2">five</span><span class="sc"> types of events: it can accept a confirmation, in which case</span></div>
<div class="l li"><span class="si">    // we record owner and operation (hash) alongside it.</span></div>
<div class="l li"><span class="si">    event Confirmation(address owner, bytes32 operation);</span></div>
<div class="l li"><span class="si">    event Revoke(address owner, bytes32 operation);</span></div>
<div class="l li"><span class="si">    // some others are in the case of an owner changing.</span></div>
<div class="l li"><span class="si">    event OwnerChanged(address oldOwner, address newOwner);</span></div>
<div class="l li"><span class="si">    event OwnerAdded(address newOwner);</span></div>
<div class="l li"><span class="si">    event OwnerRemoved(address oldOwner);</span></div>
<div class="l li"><span class="si">    // the last one is emitted if the required signatures change</span></div>
<div class="l li"><span class="si">    event RequirementChanged(uint newRequirement);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // MODIFIERS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // simple single-sig function modifier.</span></div>
<div class="l li"><span class="si">    modifier onlyowner {</span></div>
<div class="l li"><span class="si">        if (isOwner(msg.sender))</span></div>
<div class="l lc d3"><span class="sc">            _</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    // multi-sig function modifier: the operation must have an intrinsic hash in order</span></div>
<div class="l li"><span class="si">    // that later attempts can be realised as the same underlying operation and</span></div>
<div class="l li"><span class="si">    // thus count as confirmations.</span></div>
<div class="l li"><span class="si">    modifier onlymanyowners(bytes32 _operation) {</span></div>
<div class="l li"><span class="si">        if (confirmAndCheck(_operation))</span></div>
<div class="l lc d4"><span class="sc">            _</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // METHODS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // constructor is given number of sigs required to do protected &quot;onlymanyowners&quot; transactions</span></div>
<div class="l li"><span class="si">    // as well as the selection of addresses capable of confirming them.</span></div>
<div class="l li"><span class="si">    function multiowned(address[] _owners, uint _required) {</span></div>
<div class="l lc d5"> </div>
<div class="l lc d5"><span class="sc">        m_numOwners = _owners.length </span><span class="sd">+ 1</span><span class="sc">;</span></div>
<div class="l lc d5"><span class="sc">        </span><span class="sd">m_owners[1] = uint(msg.sender);</span></div>
<div class="l lc d5"><span class="sc">        </span><span class="sd">m_ownerIndex[uint(msg.sender)] = 1;</span></div>
<div class="l lc d5"><span class="sc">        for (uint i = 0; i &lt; _owners.length; ++i)</span></div>
<div class="l lc d5"><span class="sc">        </span><span class="sd">{</span></div>
<div class="l lc d5"><span class="sc">            m_owners[</span><span class="sc2">2</span><span class="sc"> + i] = uint(_owners[i]);</span></div>
<div class="l lc d5"><span class="sc">            m_ownerIndex[uint(_owners[i])] = </span><span class="sc2">2</span><span class="sc"> + i;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        m_required = _required;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    // Revokes a prior confirmation of the given operation</span></div>
<div class="l li"><span class="si">    function revoke(bytes32 _operation) external {</span></div>
<div class="l li"><span class="si">        uint ownerIndex = m_ownerIndex[uint(msg.sender)];</span></div>
<div class="l li"><span class="si">        // make sure they're an owner</span></div>
<div class="l li"><span class="si">        if (ownerIndex == 0) return;</span></div>
<div class="l li"><span class="si">        uint ownerIndexBit = 2**ownerIndex;</span></div>
<div class="l li"><span class="si">        var pending = m_pending[_operation];</span></div>
<div class="l li"><span class="si">        if (pending.ownersDone &amp; ownerIndexBit &gt; 0) {</span></div>
<div class="l li"><span class="si">            pending.yetNeeded++;</span></div>
<div class="l li"><span class="si">            pending.ownersDone -= ownerIndexBit;</span></div>
<div class="l li"><span class="si">            Revoke(msg.sender, _operation);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    // Replaces an owner `_from` with another `_to`.</span></div>
<div class="l li"><span class="si">    function changeOwner(address _from, address _to) onlymanyowners(sha3(msg.data)) external {</span></div>
<div class="l li"><span class="si">        if (isOwner(_to)) return;</span></div>
<div class="l li"><span class="si">        uint ownerIndex = m_ownerIndex[uint(_from)];</span></div>
<div class="l li"><span class="si">        if (ownerIndex == 0) return;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        clearPending();</span></div>
<div class="l li"><span class="si">        m_owners[ownerIndex] = uint(_to);</span></div>
<div class="l li"><span class="si">        m_ownerIndex[uint(_from)] = 0;</span></div>
<div class="l li"><span class="si">        m_ownerIndex[uint(_to)] = ownerIndex;</span></div>
<div class="l li"><span class="si">        OwnerChanged(_from, _to);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    function addOwner(address _owner) onlymanyowners(sha3(msg.data)) external {</span></div>
<div class="l li"><span class="si">        if (isOwner(_owner)) return;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        clearPending();</span></div>
<div class="l li"><span class="si">        if (m_numOwners &gt;= c_maxOwners)</span></div>
<div class="l li"><span class="si">            reorganizeOwners();</span></div>
<div class="l li"><span class="si">        if (m_numOwners &gt;= c_maxOwners)</span></div>
<div class="l li"><span class="si">            return;</span></div>
<div class="l li"><span class="si">        m_numOwners++;</span></div>
<div class="l li"><span class="si">        m_owners[m_numOwners] = uint(_owner);</span></div>
<div class="l li"><span class="si">        m_ownerIndex[uint(_owner)] = m_numOwners;</span></div>
<div class="l li"><span class="si">        OwnerAdded(_owner);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    function removeOwner(address _owner) onlymanyowners(sha3(msg.data)) external {</span></div>
<div class="l li"><span class="si">        uint ownerIndex = m_ownerIndex[uint(_owner)];</span></div>
<div class="l li"><span class="si">        if (ownerIndex == 0) return;</span></div>
<div class="l li"><span class="si">        if (m_required &gt; m_numOwners - 1) return;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        m_owners[ownerIndex] = 0;</span></div>
<div class="l li"><span class="si">        m_ownerIndex[uint(_owner)] = 0;</span></div>
<div class="l li"><span class="si">        clearPending();</span></div>
<div class="l li"><span class="si">        reorganizeOwners(); //make sure m_numOwner is equal to the number of owners and always points to the optimal free slot</span></div>
<div class="l li"><span class="si">        OwnerRemoved(_owner);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    function changeRequirement(uint _newRequired) onlymanyowners(sha3(msg.data)) external {</span></div>
<div class="l li"><span class="si">        if (_newRequired &gt; m_numOwners) return;</span></div>
<div class="l li"><span class="si">        m_required = _newRequired;</span></div>
<div class="l li"><span class="si">        clearPending();</span></div>
<div class="l li"><span class="si">        RequirementChanged(_newRequired);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l la d6"> </div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    function isOwner(address _addr) returns (bool) {</span></div>
<div class="l li"><span class="si">        return m_ownerIndex[uint(_addr)] &gt; 0;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    function hasConfirmed(bytes32 _operation, address _owner) constant returns (bool) {</span></div>
<div class="l li"><span class="si">        var pending = m_pending[_operation];</span></div>
<div class="l li"><span class="si">        uint ownerIndex = m_ownerIndex[uint(_owner)];</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        // make sure they're an owner</span></div>
<div class="l li"><span class="si">        if (ownerIndex == 0) return false;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        // determine the bit to set for this owner.</span></div>
<div class="l li"><span class="si">        uint ownerIndexBit = 2**ownerIndex;</span></div>
<div class="l lc d7"><span class="sc">        </span><span class="sc2">if</span><span class="sc"> (pending.ownersDone &amp; ownerIndexBit == 0) </span><span class="sc2">{</span></div>
<div class="l lc d7"><span class="sc">            </span><span class="sd">return false;</span></div>
<div class="l lc d7"><span class="sc">        </span><span class="sd">} else {</span></div>
<div class="l lc d7"><span class="sc">            </span><span class="sd">return true;</span></div>
<div class="l lc d7"><span class="sc">        </span><span class="sd">}</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    // INTERNAL METHODS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    function confirmAndCheck(bytes32 _operation) internal returns (bool) {</span></div>
<div class="l li"><span class="si">        // determine what index the present sender is:</span></div>
<div class="l li"><span class="si">        uint ownerIndex = m_ownerIndex[uint(msg.sender)];</span></div>
<div class="l li"><span class="si">        // make sure they're an owner</span></div>
<div class="l li"><span class="si">        if (ownerIndex == 0) return;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        var pending = m_pending[_operation];</span></div>
<div class="l li"><span class="si">        // if we're not yet working on this operation, switch over and reset the confirmation status.</span></div>
<div class="l li"><span class="si">        if (pending.yetNeeded == 0) {</span></div>
<div class="l li"><span class="si">            // reset count of confirmations needed.</span></div>
<div class="l li"><span class="si">            pending.yetNeeded = m_required;</span></div>
<div class="l li"><span class="si">            // reset which owners have confirmed (none) - set our bitmap to 0.</span></div>
<div class="l li"><span class="si">            pending.ownersDone = 0;</span></div>
<div class="l li"><span class="si">            pending.index = m_pendingIndex.length++;</span></div>
<div class="l li"><span class="si">            m_pendingIndex[pending.index] = _operation;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        // determine the bit to set for this owner.</span></div>
<div class="l li"><span class="si">        uint ownerIndexBit = 2**ownerIndex;</span></div>
<div class="l li"><span class="si">        // make sure we (the message sender) haven't confirmed this operation previously.</span></div>
<div class="l li"><span class="si">        if (pending.ownersDone &amp; ownerIndexBit == 0) {</span></div>
<div class="l li"><span class="si">            Confirmation(msg.sender, _operation);</span></div>
<div class="l li"><span class="si">            // ok - check if count is enough to go ahead.</span></div>
<div class="l li"><span class="si">            if (pending.yetNeeded &lt;= 1) {</span></div>
<div class="l li"><span class="si">                // enough confirmations: reset and run interior.</span></div>
<div class="l li"><span class="si">                delete m_pendingIndex[m_pending[_operation].index];</span></div>
<div class="l li"><span class="si">                delete m_pending[_operation];</span></div>
<div class="l li"><span class="si">                return true;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            else</span></div>
<div class="l li"><span class="si">            {</span></div>
<div class="l li"><span class="si">                // not enough: record that this owner in particular confirmed.</span></div>
<div class="l li"><span class="si">                pending.yetNeeded--;</span></div>
<div class="l li"><span class="si">                pending.ownersDone |= ownerIndexBit;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l lc d8"><span class="sc">    function reorganizeOwners() private </span><span class="sd">returns (bool)</span><span class="sc"> {</span></div>
<div class="l li"><span class="si">        uint free = 1;</span></div>
<div class="l li"><span class="si">        while (free &lt; m_numOwners)</span></div>
<div class="l li"><span class="si">        {</span></div>
<div class="l li"><span class="si">            while (free &lt; m_numOwners &amp;&amp; m_owners[free] != 0) free++;</span></div>
<div class="l li"><span class="si">            while (m_numOwners &gt; 1 &amp;&amp; m_owners[m_numOwners] == 0) m_numOwners--;</span></div>
<div class="l li"><span class="si">            if (free &lt; m_numOwners &amp;&amp; m_owners[m_numOwners] != 0 &amp;&amp; m_owners[free] == 0)</span></div>
<div class="l li"><span class="si">            {</span></div>
<div class="l li"><span class="si">                m_owners[free] = m_owners[m_numOwners];</span></div>
<div class="l li"><span class="si">                m_ownerIndex[m_owners[free]] = free;</span></div>
<div class="l li"><span class="si">                m_owners[m_numOwners] = 0;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    function clearPending() internal {</span></div>
<div class="l li"><span class="si">        uint length = m_pendingIndex.length;</span></div>
<div class="l li"><span class="si">        for (uint i = 0; i &lt; length; ++i)</span></div>
<div class="l li"><span class="si">            if (m_pendingIndex[i] != 0)</span></div>
<div class="l li"><span class="si">                delete m_pending[m_pendingIndex[i]];</span></div>
<div class="l li"><span class="si">        delete m_pendingIndex;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">        </span></div>
<div class="l li"><span class="si">    // FIELDS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // the number of owners that must confirm the same operation before it is run.</span></div>
<div class="l li"><span class="si">    uint public m_required;</span></div>
<div class="l li"><span class="si">    // pointer used to find a free slot in m_owners</span></div>
<div class="l li"><span class="si">    uint public m_numOwners;</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    // list of owners</span></div>
<div class="l li"><span class="si">    uint[256] m_owners;</span></div>
<div class="l li"><span class="si">    uint constant c_maxOwners = 250;</span></div>
<div class="l li"><span class="si">    // index on the list of owners to allow reverse lookup</span></div>
<div class="l li"><span class="si">    mapping(uint =&gt; uint) m_ownerIndex;</span></div>
<div class="l li"><span class="si">    // the ongoing operations.</span></div>
<div class="l li"><span class="si">    mapping(bytes32 =&gt; PendingState) m_pending;</span></div>
<div class="l li"><span class="si">    bytes32[] m_pendingIndex;</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">// inheritable &quot;property&quot; contract that enables methods to be protected by placing a linear limit (specifiable)</span></div>
<div class="l li"><span class="si">// on a particular resource per calendar day. is multiowned to allow the limit to be altered. resource that method</span></div>
<div class="l li"><span class="si">// uses is specified in the modifier.</span></div>
<div class="l li"><span class="si">contract daylimit is multiowned {</span></div>
<div class="l lg"> </div>
<div class="l ld d9"><span class="sd">    // MODIFIERS</span></div>
<div class="l lg d9"> </div>
<div class="l ld d9"><span class="sd">    // simple modifier for daily limit.</span></div>
<div class="l ld d9"><span class="sd">    modifier limitedDaily(uint _value) {</span></div>
<div class="l ld d9"><span class="sd">        if (underLimit(_value))</span></div>
<div class="l ld d9"><span class="sd">            _</span></div>
<div class="l ld d9"><span class="sd">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // METHODS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // constructor - stores initial daily limit and records the present day's index.</span></div>
<div class="l li"><span class="si">    function daylimit(uint _limit) {</span></div>
<div class="l li"><span class="si">        m_dailyLimit = _limit;</span></div>
<div class="l li"><span class="si">        m_lastDay = today();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    // (re)sets the daily limit. needs many of the owners to confirm. doesn't alter the amount already spent today.</span></div>
<div class="l li"><span class="si">    function setDailyLimit(uint _newLimit) onlymanyowners(sha3(msg.data)) external {</span></div>
<div class="l li"><span class="si">        m_dailyLimit = _newLimit;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l lc d10"><span class="sc">    // </span><span class="sc2">(</span><span class="sd">re)sets</span><span class="sc"> the </span><span class="sc2">daily limit</span><span class="sc">. needs many of the owners to confirm</span><span class="sd">. doesn't alter the amount already spent today</span><span class="sc">.</span></div>
<div class="l li"><span class="si">    function resetSpentToday() onlymanyowners(sha3(msg.data)) external {</span></div>
<div class="l li"><span class="si">        m_spentToday = 0;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    // INTERNAL METHODS</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    // checks to see if there is at least `_value` left from the daily limit today. if there is, subtracts it and</span></div>
<div class="l li"><span class="si">    // returns true. otherwise just returns false.</span></div>
<div class="l li"><span class="si">    function underLimit(uint _value) internal onlyowner returns (bool) {</span></div>
<div class="l li"><span class="si">        // reset the spend limit if we're on a different day to last time.</span></div>
<div class="l li"><span class="si">        if (today() &gt; m_lastDay) {</span></div>
<div class="l li"><span class="si">            m_spentToday = 0;</span></div>
<div class="l li"><span class="si">            m_lastDay = today();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        // check to see if there's enough left - if so, subtract and return true.</span></div>
<div class="l lc d11"> </div>
<div class="l lc d11"><span class="sc">        if (m_spentToday + _value &gt;= m_spentToday &amp;&amp; m_spentToday + _value &lt; m_dailyLimit) {</span></div>
<div class="l li"><span class="si">            m_spentToday += _value;</span></div>
<div class="l li"><span class="si">            return true;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        return false;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    // determines today's index.</span></div>
<div class="l li"><span class="si">    function today() private constant returns (uint) { return now / 1 days; }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // FIELDS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    uint public m_dailyLimit;</span></div>
<div class="l lc d12"><span class="sc">    uint m_spentToday;</span></div>
<div class="l lc d12"><span class="sc">    uint m_lastDay;</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">// interface contract for multisig proxy contracts; see below for docs.</span></div>
<div class="l li"><span class="si">contract multisig {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // EVENTS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // logged events:</span></div>
<div class="l li"><span class="si">    // Funds has arrived into the wallet (record how much).</span></div>
<div class="l lc d13"><span class="sc">    event Deposit(address </span><span class="sc2">from</span><span class="sc">, uint value);</span></div>
<div class="l li"><span class="si">    // Single transaction going out of the wallet (record who signed for it, how much, and to whom it's going).</span></div>
<div class="l lc d14"><span class="sc">    event SingleTransact(address owner, uint value, address to, bytes data);</span></div>
<div class="l li"><span class="si">    // Multi-sig transaction going out of the wallet (record who signed for it last, the operation hash, how much, and to whom it's going).</span></div>
<div class="l lc d15"><span class="sc">    event MultiTransact(address owner, bytes32 operation, uint value, address to, bytes data);</span></div>
<div class="l li"><span class="si">    // Confirmation still needed for a transaction.</span></div>
<div class="l li"><span class="si">    event ConfirmationNeeded(bytes32 operation, address initiator, uint value, address to, bytes data);</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    // FUNCTIONS</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    // TODO: document</span></div>
<div class="l li"><span class="si">    function changeOwner(address _from, address _to) external;</span></div>
<div class="l lc d16"><span class="sc">    function execute(address _to, uint _value, bytes _data) external returns (bytes32);</span></div>
<div class="l lc d16"><span class="sc">    function confirm(bytes32 _h) returns (bool);</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>
<div class="l la d17"> </div>
<div class="l la d17"> </div>
<div class="l la d17"> </div>
<div class="l la d17"> </div>
<div class="l la d17"> </div>
<div class="l la d17"> </div>
<div class="l la d17"> </div>
<div class="l la d17"> </div>
<div class="l la d17"> </div>
<div class="l la d17"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">// usage:</span></div>
<div class="l lc d18"><span class="sc">// bytes32 h = Wallet(w).from(oneOwner).</span><span class="sc2">transact</span><span class="sc">(to, value, data);</span></div>
<div class="l li"><span class="si">// Wallet(w).from(anotherOwner).confirm(h);</span></div>
<div class="l lc d19"><span class="sc">contract Wallet is multisig, multiowned, daylimit {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // TYPES</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // Transaction structure to remember details of transaction lest it need be saved for a later call.</span></div>
<div class="l li"><span class="si">    struct Transaction {</span></div>
<div class="l li"><span class="si">        address to;</span></div>
<div class="l li"><span class="si">        uint value;</span></div>
<div class="l li"><span class="si">        bytes data;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // METHODS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // constructor - just pass on the owner array to the multiowned and</span></div>
<div class="l li"><span class="si">    // the limit to daylimit</span></div>
<div class="l li"><span class="si">    function Wallet(address[] _owners, uint _required, uint _daylimit)</span></div>
<div class="l li"><span class="si">            multiowned(_owners, _required) daylimit(_daylimit) {</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    // kills the contract sending everything to `_to`.</span></div>
<div class="l li"><span class="si">    function kill(address _to) onlymanyowners(sha3(msg.data)) external {</span></div>
<div class="l li"><span class="si">        suicide(_to);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    // gets called when no other function matches</span></div>
<div class="l lc d20"><span class="sc">    function() {</span></div>
<div class="l li"><span class="si">        // just being sent some cash?</span></div>
<div class="l li"><span class="si">        if (msg.value &gt; 0)</span></div>
<div class="l li"><span class="si">            Deposit(msg.sender, msg.value);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l lc d21"><span class="sc">    // Outside-visible transact entry point. Executes </span><span class="sc2">transacion</span><span class="sc"> immediately if below daily spend limit.</span></div>
<div class="l li"><span class="si">    // If not, goes into multisig process. We provide a hash on return to allow the sender to provide</span></div>
<div class="l li"><span class="si">    // shortcuts for the other confirmations (allowing them to avoid replicating the _to, _value</span></div>
<div class="l li"><span class="si">    // and _data arguments). They still get the option of using them if they want, anyways.</span></div>
<div class="l lc d22"><span class="sc">    function execute(address _to, uint _value, bytes _data) external onlyowner returns (bytes32 </span><span class="sc2">_r</span><span class="sc">) {</span></div>
<div class="l li"><span class="si">        // first, take the opportunity to check that we're under the daily limit.</span></div>
<div class="l lc d23"><span class="sc">        if (underLimit(_value)) {</span></div>
<div class="l lc d23"><span class="sc">            </span><span class="sd">SingleTransact(msg.sender, _value, _to, _data);</span></div>
<div class="l li"><span class="si">            // yes - just execute the call.</span></div>
<div class="l lc d24"> </div>
<div class="l lc d24"> </div>
<div class="l lc d24"> </div>
<div class="l lc d24"> </div>
<div class="l lc d24"><span class="sc">            _to.call.value(_value)(_data);</span></div>
<div class="l lc d24"><span class="sc">            </span><span class="sd">return 0;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l la d25"> </div>
<div class="l la d25"> </div>
<div class="l li"><span class="si">        // determine our operation hash.</span></div>
<div class="l lc d26"><span class="sc">        </span><span class="sc2">_r</span><span class="sc"> = sha3(msg.data, block.number);</span></div>
<div class="l lc d26"><span class="sc">        if </span><span class="sc2">(!confirm(</span><span class="sd">_r) &amp;&amp; m_txs[_r].to == 0) {</span></div>
<div class="l lc d26"> </div>
<div class="l lc d26"><span class="sc">            m_txs[</span><span class="sc2">_r</span><span class="sc">].to = _to;</span></div>
<div class="l lc d26"><span class="sc">            m_txs[</span><span class="sc2">_r</span><span class="sc">].value = _value;</span></div>
<div class="l lc d26"><span class="sc">            m_txs[</span><span class="sc2">_r</span><span class="sc">].data = _data;</span></div>
<div class="l lc d26"><span class="sc">            </span><span class="sd">ConfirmationNeeded(_r, msg.sender, _value, _to, _data);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l la d27"> </div>
<div class="l la d27"> </div>
<div class="l li"><span class="si">    }</span></div>
<div class="l la d28"> </div>
<div class="l la d28"> </div>
<div class="l la d28"> </div>
<div class="l la d28"> </div>
<div class="l la d28"> </div>
<div class="l la d28"> </div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    // confirm a transaction through just the hash. we use the previous transactions map, m_txs, in order</span></div>
<div class="l li"><span class="si">    // to determine the body of the transaction from the hash provided.</span></div>
<div class="l lc d29"><span class="sc">    function confirm(bytes32 _h) onlymanyowners(_h) returns (bool) {</span></div>
<div class="l lc d29"> </div>
<div class="l lc d29"> </div>
<div class="l lc d29"><span class="sc">        if (m_txs[_h].to </span><span class="sc2">!</span><span class="sc">= 0) {</span></div>
<div class="l lc d29"> </div>
<div class="l lc d29"> </div>
<div class="l lc d29"><span class="sc">            m_txs[_h].to.call.value(m_txs[_h].value)(m_txs[_h].data);</span></div>
<div class="l lc d29"> </div>
<div class="l lc d29"> </div>
<div class="l lc d29"><span class="sc">            MultiTransact(msg.sender, _h, m_txs[_h].value, m_txs[_h].to, m_txs[_h].data);</span></div>
<div class="l li"><span class="si">            delete m_txs[_h];</span></div>
<div class="l li"><span class="si">            return true;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    // INTERNAL METHODS</span></div>
<div class="l li"><span class="si">    </span></div>
<div class="l li"><span class="si">    function clearPending() internal {</span></div>
<div class="l li"><span class="si">        uint length = m_pendingIndex.length;</span></div>
<div class="l li"><span class="si">        for (uint i = 0; i &lt; length; ++i)</span></div>
<div class="l li"><span class="si">            delete m_txs[m_pendingIndex[i]];</span></div>
<div class="l li"><span class="si">        super.clearPending();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // FIELDS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // pending transactions we have at present.</span></div>
<div class="l li"><span class="si">    mapping (bytes32 =&gt; Transaction) m_txs;</span></div>
<div class="l li"><span class="si">}</span></div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="pane">
            <div id="title2" class="title" style="width:px;" title="Proposed Multisig contract"><b>Proposed Multisig contract</b></div>
            <div id="file2" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num"> 60 </div>
<div class="num">    </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">120 </div>
<div class="num">121 </div>
<div class="num">122 </div>
<div class="num">123 </div>
<div class="num">124 </div>
<div class="num">125 </div>
<div class="num">126 </div>
<div class="num">127 </div>
<div class="num">128 </div>
<div class="num">129 </div>
<div class="num">130 </div>
<div class="num">131 </div>
<div class="num">132 </div>
<div class="num">133 </div>
<div class="num">134 </div>
<div class="num">135 </div>
<div class="num">136 </div>
<div class="num">137 </div>
<div class="num">138 </div>
<div class="num">139 </div>
<div class="num">140 </div>
<div class="num">141 </div>
<div class="num">142 </div>
<div class="num">143 </div>
<div class="num">144 </div>
<div class="num">145 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">146 </div>
<div class="num">147 </div>
<div class="num">148 </div>
<div class="num">149 </div>
<div class="num">150 </div>
<div class="num">151 </div>
<div class="num">152 </div>
<div class="num">153 </div>
<div class="num">154 </div>
<div class="num">155 </div>
<div class="num">156 </div>
<div class="num">157 </div>
<div class="num">158 </div>
<div class="num">159 </div>
<div class="num">160 </div>
<div class="num">161 </div>
<div class="num">162 </div>
<div class="num">163 </div>
<div class="num">164 </div>
<div class="num">165 </div>
<div class="num">166 </div>
<div class="num">167 </div>
<div class="num">168 </div>
<div class="num">169 </div>
<div class="num">170 </div>
<div class="num">171 </div>
<div class="num">172 </div>
<div class="num">173 </div>
<div class="num">174 </div>
<div class="num">175 </div>
<div class="num">176 </div>
<div class="num">177 </div>
<div class="num">178 </div>
<div class="num">179 </div>
<div class="num">180 </div>
<div class="num">181 </div>
<div class="num">182 </div>
<div class="num">183 </div>
<div class="num">184 </div>
<div class="num">185 </div>
<div class="num">186 </div>
<div class="num">187 </div>
<div class="num">188 </div>
<div class="num">189 </div>
<div class="num">190 </div>
<div class="num">191 </div>
<div class="num">192 </div>
<div class="num">193 </div>
<div class="num">194 </div>
<div class="num">195 </div>
<div class="num">196 </div>
<div class="num">197 </div>
<div class="num">198 </div>
<div class="num">199 </div>
<div class="num">200 </div>
<div class="num">201 </div>
<div class="num">202 </div>
<div class="num">203 </div>
<div class="num">204 </div>
<div class="num">205 </div>
<div class="num">206 </div>
<div class="num">207 </div>
<div class="num">208 </div>
<div class="num">209 </div>
<div class="num">210 </div>
<div class="num">211 </div>
<div class="num">212 </div>
<div class="num">213 </div>
<div class="num">214 </div>
<div class="num">215 </div>
<div class="num">216 </div>
<div class="num">217 </div>
<div class="num">218 </div>
<div class="num">219 </div>
<div class="num">220 </div>
<div class="num">221 </div>
<div class="num">222 </div>
<div class="num">223 </div>
<div class="num">224 </div>
<div class="num">225 </div>
<div class="num">226 </div>
<div class="num">227 </div>
<div class="num">228 </div>
<div class="num">229 </div>
<div class="num">230 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">231 </div>
<div class="num">232 </div>
<div class="num">233 </div>
<div class="num">234 </div>
<div class="num">235 </div>
<div class="num">236 </div>
<div class="num">237 </div>
<div class="num">238 </div>
<div class="num">239 </div>
<div class="num">240 </div>
<div class="num">241 </div>
<div class="num">242 </div>
<div class="num">243 </div>
<div class="num">244 </div>
<div class="num">245 </div>
<div class="num">246 </div>
<div class="num">247 </div>
<div class="num">248 </div>
<div class="num">249 </div>
<div class="num">250 </div>
<div class="num">251 </div>
<div class="num">252 </div>
<div class="num">253 </div>
<div class="num">254 </div>
<div class="num">255 </div>
<div class="num">256 </div>
<div class="num">257 </div>
<div class="num">258 </div>
<div class="num">259 </div>
<div class="num">260 </div>
<div class="num">261 </div>
<div class="num">262 </div>
<div class="num">263 </div>
<div class="num">264 </div>
<div class="num">265 </div>
<div class="num">266 </div>
<div class="num">267 </div>
<div class="num">268 </div>
<div class="num">269 </div>
<div class="num">270 </div>
<div class="num">271 </div>
<div class="num">272 </div>
<div class="num">273 </div>
<div class="num">274 </div>
<div class="num">275 </div>
<div class="num">276 </div>
<div class="num">277 </div>
<div class="num">278 </div>
<div class="num">279 </div>
<div class="num">280 </div>
<div class="num">281 </div>
<div class="num">282 </div>
<div class="num">283 </div>
<div class="num">284 </div>
<div class="num">285 </div>
<div class="num">286 </div>
<div class="num">287 </div>
<div class="num">288 </div>
<div class="num">289 </div>
<div class="num">290 </div>
<div class="num">291 </div>
<div class="num">292 </div>
<div class="num">293 </div>
<div class="num">294 </div>
<div class="num">295 </div>
<div class="num">296 </div>
<div class="num">297 </div>
<div class="num">298 </div>
<div class="num">299 </div>
<div class="num">300 </div>
<div class="num">301 </div>
<div class="num">302 </div>
<div class="num">303 </div>
<div class="num">304 </div>
<div class="num">305 </div>
<div class="num">306 </div>
<div class="num">307 </div>
<div class="num">308 </div>
<div class="num">309 </div>
<div class="num">310 </div>
<div class="num">311 </div>
<div class="num">312 </div>
<div class="num">313 </div>
<div class="num">314 </div>
<div class="num">315 </div>
<div class="num">316 </div>
<div class="num">317 </div>
<div class="num">318 </div>
<div class="num">319 </div>
<div class="num">320 </div>
<div class="num">321 </div>
<div class="num">322 </div>
<div class="num">323 </div>
<div class="num">324 </div>
<div class="num">325 </div>
<div class="num">326 </div>
<div class="num">327 </div>
<div class="num">328 </div>
<div class="num">329 </div>
<div class="num">330 </div>
<div class="num">331 </div>
<div class="num">332 </div>
<div class="num">333 </div>
<div class="num">334 </div>
<div class="num">335 </div>
<div class="num">336 </div>
<div class="num">337 </div>
<div class="num">338 </div>
<div class="num">339 </div>
<div class="num">340 </div>
<div class="num">341 </div>
<div class="num">342 </div>
<div class="num">343 </div>
<div class="num">344 </div>
<div class="num">345 </div>
<div class="num">346 </div>
<div class="num">347 </div>
<div class="num">348 </div>
<div class="num">349 </div>
<div class="num">350 </div>
<div class="num">    </div>
<div class="num">351 </div>
<div class="num">352 </div>
<div class="num">353 </div>
<div class="num">354 </div>
<div class="num">355 </div>
<div class="num">356 </div>
<div class="num">    </div>
<div class="num">357 </div>
<div class="num">358 </div>
<div class="num">359 </div>
<div class="num">360 </div>
<div class="num">361 </div>
<div class="num">362 </div>
<div class="num">363 </div>
<div class="num">364 </div>
<div class="num">365 </div>
<div class="num">366 </div>
<div class="num">    </div>
<div class="num">367 </div>
<div class="num">368 </div>
<div class="num">369 </div>
<div class="num">370 </div>
<div class="num">371 </div>
<div class="num">372 </div>
<div class="num">373 </div>
<div class="num">374 </div>
<div class="num">375 </div>
<div class="num">376 </div>
<div class="num">377 </div>
<div class="num">378 </div>
<div class="num">379 </div>
<div class="num">380 </div>
<div class="num">381 </div>
<div class="num">382 </div>
<div class="num">383 </div>
<div class="num">384 </div>
<div class="num">385 </div>
<div class="num">386 </div>
<div class="num">387 </div>
<div class="num">388 </div>
<div class="num">389 </div>
<div class="num">390 </div>
<div class="num">391 </div>
<div class="num">392 </div>
<div class="num">393 </div>
<div class="num">394 </div>
<div class="num">395 </div>
<div class="num">396 </div>
<div class="num">397 </div>
<div class="num">398 </div>
<div class="num">399 </div>
<div class="num">400 </div>
<div class="num">401 </div>
<div class="num">402 </div>
<div class="num">403 </div>
<div class="num">404 </div>
<div class="num">405 </div>
<div class="num">406 </div>
<div class="num">407 </div>
<div class="num">408 </div>

                        </td>
                        <td class="content">
                            <div class="l li"><span class="si">//sol Wallet</span></div>
<div class="l li"><span class="si">// Multi-sig, daily-limited account proxy/wallet.</span></div>
<div class="l li"><span class="si">// @authors:</span></div>
<div class="l li"><span class="si">// Gav Wood &lt;g@ethdev.com&gt;</span></div>
<div class="l li"><span class="si">// inheritable &quot;property&quot; contract that enables methods to be protected by requiring the acquiescence of either a</span></div>
<div class="l li"><span class="si">// single, or, crucially, each of a number of, designated owners.</span></div>
<div class="l li"><span class="si">// usage:</span></div>
<div class="l li"><span class="si">// use modifiers onlyowner (just own owned) or onlymanyowners(hash), whereby the same hash must be provided by</span></div>
<div class="l li"><span class="si">// some number (specified in constructor) of the set of owners (specified in the constructor, modifiable) before the</span></div>
<div class="l li"><span class="si">// interior is executed.</span></div>
<div class="l lg"> </div>
<div class="l la d1"><span class="sa">pragma solidity ^0.4.7;</span></div>
<div class="l lg"> </div>
<div class="l li"><span class="si">contract multiowned {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // TYPES</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // struct for the status of a pending operation.</span></div>
<div class="l li"><span class="si">    struct PendingState {</span></div>
<div class="l li"><span class="si">        uint yetNeeded;</span></div>
<div class="l li"><span class="si">        uint ownersDone;</span></div>
<div class="l li"><span class="si">        uint index;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // EVENTS</span></div>
<div class="l li"> </div>
<div class="l lc d2"><span class="sc">    // this contract only has </span><span class="sc2">six</span><span class="sc"> types of events: it can accept a confirmation, in which case</span></div>
<div class="l li"><span class="si">    // we record owner and operation (hash) alongside it.</span></div>
<div class="l li"><span class="si">    event Confirmation(address owner, bytes32 operation);</span></div>
<div class="l li"><span class="si">    event Revoke(address owner, bytes32 operation);</span></div>
<div class="l li"><span class="si">    // some others are in the case of an owner changing.</span></div>
<div class="l li"><span class="si">    event OwnerChanged(address oldOwner, address newOwner);</span></div>
<div class="l li"><span class="si">    event OwnerAdded(address newOwner);</span></div>
<div class="l li"><span class="si">    event OwnerRemoved(address oldOwner);</span></div>
<div class="l li"><span class="si">    // the last one is emitted if the required signatures change</span></div>
<div class="l li"><span class="si">    event RequirementChanged(uint newRequirement);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // MODIFIERS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // simple single-sig function modifier.</span></div>
<div class="l li"><span class="si">    modifier onlyowner {</span></div>
<div class="l li"><span class="si">        if (isOwner(msg.sender))</span></div>
<div class="l lc d3"><span class="sc">            _</span><span class="sa">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    // multi-sig function modifier: the operation must have an intrinsic hash in order</span></div>
<div class="l li"><span class="si">    // that later attempts can be realised as the same underlying operation and</span></div>
<div class="l li"><span class="si">    // thus count as confirmations.</span></div>
<div class="l li"><span class="si">    modifier onlymanyowners(bytes32 _operation) {</span></div>
<div class="l li"><span class="si">        if (confirmAndCheck(_operation))</span></div>
<div class="l lc d4"><span class="sc">            _</span><span class="sa">;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // METHODS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // constructor is given number of sigs required to do protected &quot;onlymanyowners&quot; transactions</span></div>
<div class="l li"><span class="si">    // as well as the selection of addresses capable of confirming them.</span></div>
<div class="l li"><span class="si">    function multiowned(address[] _owners, uint _required) {</span></div>
<div class="l lc d5"><span class="sc">        </span><span class="sa">require(_owners.length &gt; 0);</span></div>
<div class="l lc d5"><span class="sc">        m_numOwners = _owners.length;</span></div>
<div class="l lc d5"> </div>
<div class="l lc d5"> </div>
<div class="l lc d5"><span class="sc">        for (uint i = 0; i &lt; _owners.length; ++i) </span><span class="sa">{</span></div>
<div class="l lc d5"> </div>
<div class="l lc d5"><span class="sc">            m_owners[</span><span class="sc2">1</span><span class="sc"> + i] = uint(_owners[i]);</span></div>
<div class="l lc d5"><span class="sc">            m_ownerIndex[uint(_owners[i])] = </span><span class="sc2">1</span><span class="sc"> + i;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        m_required = _required;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // Revokes a prior confirmation of the given operation</span></div>
<div class="l li"><span class="si">    function revoke(bytes32 _operation) external {</span></div>
<div class="l li"><span class="si">        uint ownerIndex = m_ownerIndex[uint(msg.sender)];</span></div>
<div class="l li"><span class="si">        // make sure they're an owner</span></div>
<div class="l li"><span class="si">        if (ownerIndex == 0) return;</span></div>
<div class="l li"><span class="si">        uint ownerIndexBit = 2**ownerIndex;</span></div>
<div class="l li"><span class="si">        var pending = m_pending[_operation];</span></div>
<div class="l li"><span class="si">        if (pending.ownersDone &amp; ownerIndexBit &gt; 0) {</span></div>
<div class="l li"><span class="si">            pending.yetNeeded++;</span></div>
<div class="l li"><span class="si">            pending.ownersDone -= ownerIndexBit;</span></div>
<div class="l li"><span class="si">            Revoke(msg.sender, _operation);</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // Replaces an owner `_from` with another `_to`.</span></div>
<div class="l li"><span class="si">    function changeOwner(address _from, address _to) onlymanyowners(sha3(msg.data)) external {</span></div>
<div class="l li"><span class="si">        if (isOwner(_to)) return;</span></div>
<div class="l li"><span class="si">        uint ownerIndex = m_ownerIndex[uint(_from)];</span></div>
<div class="l li"><span class="si">        if (ownerIndex == 0) return;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        clearPending();</span></div>
<div class="l li"><span class="si">        m_owners[ownerIndex] = uint(_to);</span></div>
<div class="l li"><span class="si">        m_ownerIndex[uint(_from)] = 0;</span></div>
<div class="l li"><span class="si">        m_ownerIndex[uint(_to)] = ownerIndex;</span></div>
<div class="l li"><span class="si">        OwnerChanged(_from, _to);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    function addOwner(address _owner) onlymanyowners(sha3(msg.data)) external {</span></div>
<div class="l li"><span class="si">        if (isOwner(_owner)) return;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        clearPending();</span></div>
<div class="l li"><span class="si">        if (m_numOwners &gt;= c_maxOwners)</span></div>
<div class="l li"><span class="si">            reorganizeOwners();</span></div>
<div class="l li"><span class="si">        if (m_numOwners &gt;= c_maxOwners)</span></div>
<div class="l li"><span class="si">            return;</span></div>
<div class="l li"><span class="si">        m_numOwners++;</span></div>
<div class="l li"><span class="si">        m_owners[m_numOwners] = uint(_owner);</span></div>
<div class="l li"><span class="si">        m_ownerIndex[uint(_owner)] = m_numOwners;</span></div>
<div class="l li"><span class="si">        OwnerAdded(_owner);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    function removeOwner(address _owner) onlymanyowners(sha3(msg.data)) external {</span></div>
<div class="l li"><span class="si">        uint ownerIndex = m_ownerIndex[uint(_owner)];</span></div>
<div class="l li"><span class="si">        if (ownerIndex == 0) return;</span></div>
<div class="l li"><span class="si">        if (m_required &gt; m_numOwners - 1) return;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        m_owners[ownerIndex] = 0;</span></div>
<div class="l li"><span class="si">        m_ownerIndex[uint(_owner)] = 0;</span></div>
<div class="l li"><span class="si">        clearPending();</span></div>
<div class="l li"><span class="si">        reorganizeOwners(); //make sure m_numOwner is equal to the number of owners and always points to the optimal free slot</span></div>
<div class="l li"><span class="si">        OwnerRemoved(_owner);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    function changeRequirement(uint _newRequired) onlymanyowners(sha3(msg.data)) external {</span></div>
<div class="l li"><span class="si">        if (_newRequired &gt; m_numOwners) return;</span></div>
<div class="l li"><span class="si">        m_required = _newRequired;</span></div>
<div class="l li"><span class="si">        clearPending();</span></div>
<div class="l li"><span class="si">        RequirementChanged(_newRequired);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l lg"> </div>
<div class="l la d6"><span class="sa">    // Gets an owner by 0-indexed position (using numOwners as the count)</span></div>
<div class="l la d6"><span class="sa">    function getOwner(uint ownerIndex) external constant returns (address) {</span></div>
<div class="l la d6"><span class="sa">        return address(m_owners[ownerIndex + 1]);</span></div>
<div class="l la d6"><span class="sa">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    function isOwner(address _addr) returns (bool) {</span></div>
<div class="l li"><span class="si">        return m_ownerIndex[uint(_addr)] &gt; 0;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    function hasConfirmed(bytes32 _operation, address _owner) constant returns (bool) {</span></div>
<div class="l li"><span class="si">        var pending = m_pending[_operation];</span></div>
<div class="l li"><span class="si">        uint ownerIndex = m_ownerIndex[uint(_owner)];</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        // make sure they're an owner</span></div>
<div class="l li"><span class="si">        if (ownerIndex == 0) return false;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        // determine the bit to set for this owner.</span></div>
<div class="l li"><span class="si">        uint ownerIndexBit = 2**ownerIndex;</span></div>
<div class="l lc d7"><span class="sc">        </span><span class="sc2">return</span><span class="sc"> </span><span class="sa">!</span><span class="sc">(pending.ownersDone &amp; ownerIndexBit == 0)</span><span class="sc2">;</span></div>
<div class="l lc d7"> </div>
<div class="l lc d7"> </div>
<div class="l lc d7"> </div>
<div class="l lc d7"> </div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // INTERNAL METHODS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    function confirmAndCheck(bytes32 _operation) internal returns (bool) {</span></div>
<div class="l li"><span class="si">        // determine what index the present sender is:</span></div>
<div class="l li"><span class="si">        uint ownerIndex = m_ownerIndex[uint(msg.sender)];</span></div>
<div class="l li"><span class="si">        // make sure they're an owner</span></div>
<div class="l li"><span class="si">        if (ownerIndex == 0) return;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">        var pending = m_pending[_operation];</span></div>
<div class="l li"><span class="si">        // if we're not yet working on this operation, switch over and reset the confirmation status.</span></div>
<div class="l li"><span class="si">        if (pending.yetNeeded == 0) {</span></div>
<div class="l li"><span class="si">            // reset count of confirmations needed.</span></div>
<div class="l li"><span class="si">            pending.yetNeeded = m_required;</span></div>
<div class="l li"><span class="si">            // reset which owners have confirmed (none) - set our bitmap to 0.</span></div>
<div class="l li"><span class="si">            pending.ownersDone = 0;</span></div>
<div class="l li"><span class="si">            pending.index = m_pendingIndex.length++;</span></div>
<div class="l li"><span class="si">            m_pendingIndex[pending.index] = _operation;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        // determine the bit to set for this owner.</span></div>
<div class="l li"><span class="si">        uint ownerIndexBit = 2**ownerIndex;</span></div>
<div class="l li"><span class="si">        // make sure we (the message sender) haven't confirmed this operation previously.</span></div>
<div class="l li"><span class="si">        if (pending.ownersDone &amp; ownerIndexBit == 0) {</span></div>
<div class="l li"><span class="si">            Confirmation(msg.sender, _operation);</span></div>
<div class="l li"><span class="si">            // ok - check if count is enough to go ahead.</span></div>
<div class="l li"><span class="si">            if (pending.yetNeeded &lt;= 1) {</span></div>
<div class="l li"><span class="si">                // enough confirmations: reset and run interior.</span></div>
<div class="l li"><span class="si">                delete m_pendingIndex[m_pending[_operation].index];</span></div>
<div class="l li"><span class="si">                delete m_pending[_operation];</span></div>
<div class="l li"><span class="si">                return true;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">            else</span></div>
<div class="l li"><span class="si">            {</span></div>
<div class="l li"><span class="si">                // not enough: record that this owner in particular confirmed.</span></div>
<div class="l li"><span class="si">                pending.yetNeeded--;</span></div>
<div class="l li"><span class="si">                pending.ownersDone |= ownerIndexBit;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l lc d8"><span class="sc">    function reorganizeOwners() private {</span></div>
<div class="l li"><span class="si">        uint free = 1;</span></div>
<div class="l li"><span class="si">        while (free &lt; m_numOwners)</span></div>
<div class="l li"><span class="si">        {</span></div>
<div class="l li"><span class="si">            while (free &lt; m_numOwners &amp;&amp; m_owners[free] != 0) free++;</span></div>
<div class="l li"><span class="si">            while (m_numOwners &gt; 1 &amp;&amp; m_owners[m_numOwners] == 0) m_numOwners--;</span></div>
<div class="l li"><span class="si">            if (free &lt; m_numOwners &amp;&amp; m_owners[m_numOwners] != 0 &amp;&amp; m_owners[free] == 0)</span></div>
<div class="l li"><span class="si">            {</span></div>
<div class="l li"><span class="si">                m_owners[free] = m_owners[m_numOwners];</span></div>
<div class="l li"><span class="si">                m_ownerIndex[m_owners[free]] = free;</span></div>
<div class="l li"><span class="si">                m_owners[m_numOwners] = 0;</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    function clearPending() internal {</span></div>
<div class="l li"><span class="si">        uint length = m_pendingIndex.length;</span></div>
<div class="l li"><span class="si">        for (uint i = 0; i &lt; length; ++i)</span></div>
<div class="l li"><span class="si">            if (m_pendingIndex[i] != 0)</span></div>
<div class="l li"><span class="si">                delete m_pending[m_pendingIndex[i]];</span></div>
<div class="l li"><span class="si">        delete m_pendingIndex;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // FIELDS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // the number of owners that must confirm the same operation before it is run.</span></div>
<div class="l li"><span class="si">    uint public m_required;</span></div>
<div class="l li"><span class="si">    // pointer used to find a free slot in m_owners</span></div>
<div class="l li"><span class="si">    uint public m_numOwners;</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // list of owners</span></div>
<div class="l li"><span class="si">    uint[256] m_owners;</span></div>
<div class="l li"><span class="si">    uint constant c_maxOwners = 250;</span></div>
<div class="l li"><span class="si">    // index on the list of owners to allow reverse lookup</span></div>
<div class="l li"><span class="si">    mapping(uint =&gt; uint) m_ownerIndex;</span></div>
<div class="l li"><span class="si">    // the ongoing operations.</span></div>
<div class="l li"><span class="si">    mapping(bytes32 =&gt; PendingState) m_pending;</span></div>
<div class="l li"><span class="si">    bytes32[] m_pendingIndex;</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">// inheritable &quot;property&quot; contract that enables methods to be protected by placing a linear limit (specifiable)</span></div>
<div class="l li"><span class="si">// on a particular resource per calendar day. is multiowned to allow the limit to be altered. resource that method</span></div>
<div class="l li"><span class="si">// uses is specified in the modifier.</span></div>
<div class="l li"><span class="si">contract daylimit is multiowned {</span></div>
<div class="l li"> </div>
<div class="l ld d9"> </div>
<div class="l ld d9"> </div>
<div class="l ld d9"> </div>
<div class="l ld d9"> </div>
<div class="l ld d9"> </div>
<div class="l ld d9"> </div>
<div class="l ld d9"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // METHODS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // constructor - stores initial daily limit and records the present day's index.</span></div>
<div class="l li"><span class="si">    function daylimit(uint _limit) {</span></div>
<div class="l li"><span class="si">        m_dailyLimit = _limit;</span></div>
<div class="l li"><span class="si">        m_lastDay = today();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    // (re)sets the daily limit. needs many of the owners to confirm. doesn't alter the amount already spent today.</span></div>
<div class="l li"><span class="si">    function setDailyLimit(uint _newLimit) onlymanyowners(sha3(msg.data)) external {</span></div>
<div class="l li"><span class="si">        m_dailyLimit = _newLimit;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l lc d10"><span class="sc">    // </span><span class="sc2">resets</span><span class="sc"> the </span><span class="sc2">amount already</span><span class="sc"> </span><span class="sa">spent today</span><span class="sc">. needs many of the owners to confirm.</span></div>
<div class="l li"><span class="si">    function resetSpentToday() onlymanyowners(sha3(msg.data)) external {</span></div>
<div class="l li"><span class="si">        m_spentToday = 0;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // INTERNAL METHODS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // checks to see if there is at least `_value` left from the daily limit today. if there is, subtracts it and</span></div>
<div class="l li"><span class="si">    // returns true. otherwise just returns false.</span></div>
<div class="l li"><span class="si">    function underLimit(uint _value) internal onlyowner returns (bool) {</span></div>
<div class="l li"><span class="si">        // reset the spend limit if we're on a different day to last time.</span></div>
<div class="l li"><span class="si">        if (today() &gt; m_lastDay) {</span></div>
<div class="l li"><span class="si">            m_spentToday = 0;</span></div>
<div class="l li"><span class="si">            m_lastDay = today();</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        // check to see if there's enough left - if so, subtract and return true.</span></div>
<div class="l lc d11"><span class="sc">        </span><span class="sa">// overflow protection                    // dailyLimit check</span></div>
<div class="l lc d11"><span class="sc">        if (m_spentToday + _value &gt;= m_spentToday &amp;&amp; m_spentToday + _value &lt;</span><span class="sa">=</span><span class="sc"> m_dailyLimit) {</span></div>
<div class="l li"><span class="si">            m_spentToday += _value;</span></div>
<div class="l li"><span class="si">            return true;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">        return false;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    // determines today's index.</span></div>
<div class="l li"><span class="si">    function today() private constant returns (uint) { return now / 1 days; }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // FIELDS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    uint public m_dailyLimit;</span></div>
<div class="l lc d12"><span class="sc">    uint </span><span class="sa">public</span><span class="sc"> m_spentToday;</span></div>
<div class="l lc d12"><span class="sc">    uint </span><span class="sa">public</span><span class="sc"> m_lastDay;</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">// interface contract for multisig proxy contracts; see below for docs.</span></div>
<div class="l li"><span class="si">contract multisig {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // EVENTS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // logged events:</span></div>
<div class="l li"><span class="si">    // Funds has arrived into the wallet (record how much).</span></div>
<div class="l lc d13"><span class="sc">    event Deposit(address </span><span class="sc2">_from</span><span class="sc">, uint value);</span></div>
<div class="l li"><span class="si">    // Single transaction going out of the wallet (record who signed for it, how much, and to whom it's going).</span></div>
<div class="l lc d14"><span class="sc">    event SingleTransact(address owner, uint value, address to, bytes data</span><span class="sa">, address created</span><span class="sc">);</span></div>
<div class="l li"><span class="si">    // Multi-sig transaction going out of the wallet (record who signed for it last, the operation hash, how much, and to whom it's going).</span></div>
<div class="l lc d15"><span class="sc">    event MultiTransact(address owner, bytes32 operation, uint value, address to, bytes data</span><span class="sa">, address created</span><span class="sc">);</span></div>
<div class="l li"><span class="si">    // Confirmation still needed for a transaction.</span></div>
<div class="l li"><span class="si">    event ConfirmationNeeded(bytes32 operation, address initiator, uint value, address to, bytes data);</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // FUNCTIONS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // TODO: document</span></div>
<div class="l li"><span class="si">    function changeOwner(address _from, address _to) external;</span></div>
<div class="l lc d16"><span class="sc">    function execute(address _to, uint _value, bytes _data) external returns (bytes32 </span><span class="sa">o_hash</span><span class="sc">);</span></div>
<div class="l lc d16"><span class="sc">    function confirm(bytes32 _h) returns (bool </span><span class="sa">o_success</span><span class="sc">);</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l lg"> </div>
<div class="l la d17"><span class="sa">contract creator {</span></div>
<div class="l la d17"><span class="sa">    function doCreate(uint _value, bytes _code) internal returns (address o_addr) {</span></div>
<div class="l la d17"><span class="sa">        bool created;</span></div>
<div class="l la d17"><span class="sa">        assembly {</span></div>
<div class="l la d17"><span class="sa">            o_addr := create(_value, add(_code, 0x20), mload(_code))</span></div>
<div class="l la d17"><span class="sa">            created := iszero(extcodesize(o_addr))</span></div>
<div class="l la d17"><span class="sa">        }</span></div>
<div class="l la d17"><span class="sa">        require(created);</span></div>
<div class="l la d17"><span class="sa">    }</span></div>
<div class="l la d17"><span class="sa">}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">// usage:</span></div>
<div class="l lc d18"><span class="sc">// bytes32 h = Wallet(w).from(oneOwner).</span><span class="sc2">execute</span><span class="sc">(to, value, data);</span></div>
<div class="l li"><span class="si">// Wallet(w).from(anotherOwner).confirm(h);</span></div>
<div class="l lc d19"><span class="sc">contract Wallet is multisig, multiowned, daylimit</span><span class="sa">, creator</span><span class="sc"> {</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // TYPES</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // Transaction structure to remember details of transaction lest it need be saved for a later call.</span></div>
<div class="l li"><span class="si">    struct Transaction {</span></div>
<div class="l li"><span class="si">        address to;</span></div>
<div class="l li"><span class="si">        uint value;</span></div>
<div class="l li"><span class="si">        bytes data;</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // METHODS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // constructor - just pass on the owner array to the multiowned and</span></div>
<div class="l li"><span class="si">    // the limit to daylimit</span></div>
<div class="l li"><span class="si">    function Wallet(address[] _owners, uint _required, uint _daylimit)</span></div>
<div class="l li"><span class="si">            multiowned(_owners, _required) daylimit(_daylimit) {</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // kills the contract sending everything to `_to`.</span></div>
<div class="l li"><span class="si">    function kill(address _to) onlymanyowners(sha3(msg.data)) external {</span></div>
<div class="l li"><span class="si">        suicide(_to);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // gets called when no other function matches</span></div>
<div class="l lc d20"><span class="sc">    function() </span><span class="sa">payable</span><span class="sc"> {</span></div>
<div class="l li"><span class="si">        // just being sent some cash?</span></div>
<div class="l li"><span class="si">        if (msg.value &gt; 0)</span></div>
<div class="l li"><span class="si">            Deposit(msg.sender, msg.value);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l lc d21"><span class="sc">    // Outside-visible transact entry point. Executes </span><span class="sc2">transaction</span><span class="sc"> immediately if below daily spend limit.</span></div>
<div class="l li"><span class="si">    // If not, goes into multisig process. We provide a hash on return to allow the sender to provide</span></div>
<div class="l li"><span class="si">    // shortcuts for the other confirmations (allowing them to avoid replicating the _to, _value</span></div>
<div class="l li"><span class="si">    // and _data arguments). They still get the option of using them if they want, anyways.</span></div>
<div class="l lc d22"><span class="sc">    function execute(address _to, uint _value, bytes _data) external onlyowner returns (bytes32 </span><span class="sc2">o_hash</span><span class="sc">) {</span></div>
<div class="l li"><span class="si">        // first, take the opportunity to check that we're under the daily limit.</span></div>
<div class="l lc d23"><span class="sc">        if (</span><span class="sa">(_data.length == 0 &amp;&amp;</span><span class="sc"> underLimit(_value)</span><span class="sa">) || m_required == 1</span><span class="sc">) {</span></div>
<div class="l lc d23"> </div>
<div class="l li"><span class="si">            // yes - just execute the call.</span></div>
<div class="l lc d24"><span class="sc">            </span><span class="sa">address created;</span></div>
<div class="l lc d24"><span class="sc">            </span><span class="sa">if (_to == 0) {</span></div>
<div class="l lc d24"><span class="sc">                </span><span class="sa">created = create(_value, _data);</span></div>
<div class="l lc d24"><span class="sc">            </span><span class="sa">} else {</span></div>
<div class="l lc d24"><span class="sc">                </span><span class="sa">require(</span><span class="sc">_to.call.value(_value)(_data</span><span class="sa">)</span><span class="sc">);</span></div>
<div class="l lc d24"> </div>
<div class="l li"><span class="si">            }</span></div>
<div class="l la d25"><span class="sa">            SingleTransact(msg.sender, _value, _to, _data, created);</span></div>
<div class="l la d25"><span class="sa">        } else {</span></div>
<div class="l li"><span class="si">            // determine our operation hash.</span></div>
<div class="l lc d26"><span class="sc">            </span><span class="sc2">o_hash</span><span class="sc"> = sha3(msg.data, block.number);</span></div>
<div class="l lc d26"><span class="sc">            </span><span class="sa">// store</span><span class="sc"> if </span><span class="sc2">it's new</span></div>
<div class="l lc d26"><span class="sc">            </span><span class="sa">if (m_txs[o_hash].to == 0 &amp;&amp; m_txs[o_hash].value == 0 &amp;&amp; m_txs[o_hash].data.length == 0) {</span></div>
<div class="l lc d26"><span class="sc">                m_txs[</span><span class="sc2">o_hash</span><span class="sc">].to = _to;</span></div>
<div class="l lc d26"><span class="sc">                m_txs[</span><span class="sc2">o_hash</span><span class="sc">].value = _value;</span></div>
<div class="l lc d26"><span class="sc">                m_txs[</span><span class="sc2">o_hash</span><span class="sc">].data = _data;</span></div>
<div class="l lc d26"> </div>
<div class="l li"><span class="si">            }</span></div>
<div class="l la d27"><span class="sa">            if (!confirm(o_hash)) {</span></div>
<div class="l la d27"><span class="sa">                ConfirmationNeeded(o_hash, msg.sender, _value, _to, _data);</span></div>
<div class="l li"><span class="si">            }</span></div>
<div class="l la d28"><span class="sa">        }</span></div>
<div class="l la d28"><span class="sa">    }</span></div>
<div class="l lg d28"> </div>
<div class="l la d28"><span class="sa">    function create(uint _value, bytes _code) internal returns (address o_addr) {</span></div>
<div class="l la d28"><span class="sa">        return doCreate(_value, _code);</span></div>
<div class="l la d28"><span class="sa">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // confirm a transaction through just the hash. we use the previous transactions map, m_txs, in order</span></div>
<div class="l li"><span class="si">    // to determine the body of the transaction from the hash provided.</span></div>
<div class="l lc d29"><span class="sc">    function confirm(bytes32 _h) onlymanyowners(_h) returns (bool </span><span class="sa">o_success</span><span class="sc">) {</span></div>
<div class="l lc d29"><span class="sc">        </span><span class="sa">if (m_txs[_h].to != 0 || m_txs[_h].value != 0 || m_txs[_h].data.length != 0) {</span></div>
<div class="l lc d29"><span class="sc">            </span><span class="sa">address created;</span></div>
<div class="l lc d29"><span class="sc">            if (m_txs[_h].to </span><span class="sc2">=</span><span class="sc">= 0) {</span></div>
<div class="l lc d29"><span class="sc">                </span><span class="sa">created = create(m_txs[_h].value, m_txs[_h].data);</span></div>
<div class="l lc d29"><span class="sc">            </span><span class="sa">} else {</span></div>
<div class="l lc d29"><span class="sc">                </span><span class="sa">require(</span><span class="sc">m_txs[_h].to.call.value(m_txs[_h].value)(m_txs[_h].data</span><span class="sa">)</span><span class="sc">);</span></div>
<div class="l lc d29"><span class="sc">            </span><span class="sa">}</span></div>
<div class="l lg d29"> </div>
<div class="l lc d29"><span class="sc">            MultiTransact(msg.sender, _h, m_txs[_h].value, m_txs[_h].to, m_txs[_h].data</span><span class="sa">, created</span><span class="sc">);</span></div>
<div class="l li"><span class="si">            delete m_txs[_h];</span></div>
<div class="l li"><span class="si">            return true;</span></div>
<div class="l li"><span class="si">        }</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // INTERNAL METHODS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    function clearPending() internal {</span></div>
<div class="l li"><span class="si">        uint length = m_pendingIndex.length;</span></div>
<div class="l li"><span class="si">        for (uint i = 0; i &lt; length; ++i)</span></div>
<div class="l li"><span class="si">            delete m_txs[m_pendingIndex[i]];</span></div>
<div class="l li"><span class="si">        super.clearPending();</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // FIELDS</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    // pending transactions we have at present.</span></div>
<div class="l li"><span class="si">    mapping (bytes32 =&gt; Transaction) m_txs;</span></div>
<div class="l li"><span class="si">}</span></div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div id="inspector" style="display: none;">
        <div class="left line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorLeftContent"></div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="right line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorRightContent"></div>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    <div id="legend">
        <div id="numDiffs"><b>29 differences</b>: 86 lines, 67 inline differences in 54 changed lines</div><div id="colors"><div class="sa" title="Added lines: 25, inline additions in changed lines: 35">Added(25,35)</div><div class="sd" title="Deleted lines: 7, inline deletions in changed lines: 15">Deleted(7,15)</div><div class="sc" title="Changed lines: 54">Changed(54)</div><div class="sc2" title="Inline changes in changed lines: 17">Changed in changed(17)</div><div class="sig" title="Ignored lines and line parts">Ignored</div></div>
    </div>

    <div id="generated_by">
        Generated on July 20, 2017, 9:43 AM by <a href="http://www.prestosoft.com/edp_examdiffpro.asp?ref=diffreport" target="_blank">ExamDiff Pro</a> 9.0.1.0.
    </div>
</div>
</body>

</html>

